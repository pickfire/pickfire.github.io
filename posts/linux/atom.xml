<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Pickfire linux</title><link href="pickfire.tk/linux"/><updated>2022-11-29T16:03:31Z</updated><author><name>Ivan Tham</name><email>pickfire@riseup.net</email></author><id>http://pickfire.tk/posts/linux/atom.xml</id><link href="pickfire.tk/posts/linux/atom.xml"/><entry><title>Simple Tools for Development Environment</title><link href="http://pickfire.tk/posts/linux/dev"/><updated>2020-05-23T13:20:43Z</updated><content type="html"><![CDATA[<h1>Simple Tools for Development Environment</h1><p>Development environment accustomed to me. <a href="https://github.com/pickfire/dotfiles">pickfire's dotfiles</a></p><h2>Window Manager</h2><p>Tiling window manager, I like <a href="//dwm.suckless.org">dwm</a>.</p><h3>dwmstatus</h3><p>Simple status bar for <a href="//dwm.suckless.org">dwm</a>, not click-able, not colour-able. Use a simple
C script to lower the processing cost as it runs every second. Current status:</p><pre><code>♪ 100% ⚡ AC │ ↓ 1.2k ↓ 0 │ / 80% ~ 70% │ 0.12 │ Mon Fed 28 00:00:00
</code></pre><h2>Terminal</h2><p>I use <a href="//st.suckless.org">st</a> as it is fast and support true colors (my
ultimate motive).</p><h2>Editor</h2><h4><strong>Note: I am not a participatant of the editor wars, I use vi-like keys just to prevent <em>»little-finger ache«</em></strong></h4><p><a href="//neovim.org">neovim</a> as a stylish vi-editor with fast
<a href="https://github.com/junegunn/vim-plug">vim-plug</a> as the plugin manager.</p>]]></content></entry><entry><title>New system setup: Coreboot + Grub + Luks + Btrfs + Alpine</title><link href="http://pickfire.tk/posts/linux/setup"/><updated>2019-08-04T11:22:34Z</updated><content type="html"><![CDATA[<h1>New system setup: Coreboot + Grub + Luks + Btrfs + Alpine</h1><p>I used Arch Linux for some time, should switch to Alpine Linux for simplicity.
The setup will be on thinkpad x220 brought from <a href="//hendry.iki.fi/">Kai Hendry</a>, thanks to
him for keeping his laptop in good state. :)</p><p>Quick overview:</p><ul><li>Bootloader: Coreboot + Grub payload (testing)</li><li>Encryption: Dm-crypt LUKS + key file from sd card</li><li>Filesystem: Btrfs raid 0 (data) + raid 1 (metadata)</li><li>Root setup: Alpine Linux</li></ul><h2>Setting up Coreboot</h2><p>Why switch to coreboot? Default firmware took 8s to boot. Now <code>x &lt; 2s</code>. Haha!</p><ol><li><p>Preparation</p><ol><li>Get raspberry pi 2 and <a href="//www.ebay.com/itm/162284060668?_trksid=p2057872.m2749.l2649&amp;ssPageName=STRK%3AMEBIDX%3AIT">SOIC clip + probe cables</a></li><li>Install flashrom and build coreboot with grub2 payload</li><li>Prerequisite: <code>make crossgcc-i386 CPUS=4</code>, <code>make iasl</code></li></ol></li><li><p>Set up flasher - <a href="//www.coreboot.org/Board:lenovo/x220">coreboot wiki</a> and <a href="//tylercipriani.com/blog/2016/11/13/coreboot-on-the-thinkpad-x220-with-a-raspberry-pi/">tylercipriani</a></p><ol><li><a href="//support.lenovo.com/us/en/videos/pd022683">Lenovo guide to remove keyboard and palm rest</a></li><li>Purge any power source of laptop &amp; programmer (rpi2)</li><li>Connect the probe cables between programmer and chip</li><li>Then <strong>only turn on the power source</strong> of programmer</li></ol></li><li><p>(Optional) Extracting the VGA BIOS which is better than SeaVGABios</p><ol><li>More info available at <a href="//nroach44.id.au/index.php/2016/12/11/thinkpad-x220-coreboot-and-me-removal/">nroach44</a> and <a href="//www.coreboot.org/VGA_support#UEFI_Method">coreboot wiki</a></li><li>Download, build <a href="//github.com/LongSoft/UEFITool">uefitool</a>, open factory.rom with uefitool</li><li>Search for text &quot;VGA Compatible BIOS&quot; with unicode <strong>unchecked</strong></li><li>Double click matching result, then extract body of <code>Raw section</code></li><li>(Optional) check word &quot;VGA Display controller&quot; with <code>romheaders</code></li></ol></li><li><p>(Optional) Cleaning up me.bin (now this option is in nconfig)</p><ol><li>More info available at <a href="//nroach44.id.au/index.php/2017/01/24/thinkpad-x220-shrink-the-me-region/">nroach44</a></li><li>Necessary: <code>util/me_cleaner/me_cleaner.py build/coreboot.bin</code></li><li>(Optional) Verify that <code>util/intelmetool/intelmetool -s</code> show
output &quot;Firmware Init Complete&quot; as &quot;NO&quot;</li><li>To proceed - <code>util/me_cleaner/me_cleaner.py me.bin</code> and <code>make</code></li><li><code>hexdump me.bin</code> and check last byte which have tons of <code>ffff</code></li><li><code>dd if=me.bin of=truc.bin bs=1 count=$(printf '%d' 0x00dbc90)</code></li></ol></li><li><p>(Optional) Setting battery threshold</p><ol><li>More info available at <a href="//wej.k.vu/coreboot/coreboot_on_the_lenovo_thinkpad_x220">vej's blog</a></li><li>Build util/ectool</li><li>Battery start threshold 75% - <code>util/ectool -w 0xb1 -z 0x4b</code></li><li>Battery stop threshold 80%  - <code>util/ectool -w 0xb1 -z 0x50</code></li></ol></li><li><p>Building coreboot</p><ol><li><p>More info available at <a href="//www.coreboot.org/Board:lenovo/x220">coreboot wiki x220 page</a></p></li><li><p>First check <code>flashrom -p linux_spi:dev=/dev/spidev0.0</code></p></li><li><p>If it gets an error: poweroff, reconnect pin and boot</p></li><li><p><code>flashrom -p linux_spi:dev=/dev/spidev0.0 -r orig.bin</code></p></li><li><p>Check orig.bin hash &amp; redo step 4-5, not same? step 2</p></li><li><p>Extract the factory binary blob: <code>ifdtool -x orig.bin</code></p></li><li><p>Move outputs to <code>3rdparty/blobs/mainboard/lenovo/x220</code></p></li><li><p>Rename files as &quot;descriptor.bin&quot;, &quot;gbe.bin&quot;, &quot;me.bin&quot;</p></li><li><p><code>make nconfig</code> and tune it accordingly .config (dead)</p></li><li><p>If it builds, verify with step 4-5 twice and finally:</p><pre><code>flashrom -p linux_spi:dev=/dev/spidev0.0 -w build/coreboot.rom
</code></pre></li></ol></li><li><p>After coreboot is flashed, internal flashing can be done by:</p><ul><li><code>iomem=relaxed</code> in cmdline</li><li><code>flashrom -p internal:laptop=force_I_want_a_brick -c MX25L6405 -w build/coreboot.rom --ifd -i bios -n</code></li></ul></li><li><p>Tips and tricks:</p><ul><li>Find bootorder with <code>CONFIG_USE_OPTION_TABLE</code>, <code>CONFIG_CONSOLE_CBMEM</code>,
<code>DEFAULT_CONSOLE_LOGLEVEL_6</code>, then <code>util/cbmem/cbmem -c | grep booto</code>.</li><li>The extra config such as <code>bootorder</code>, <code>config_seabios</code> can be set with
<code>$(top)/src/mainboard/$(MAINBOARDDIR)/*</code> where you can store it inside
<code>src/mainboard/lenovo/x220/</code> to differentiate between different boards.</li></ul></li></ol><p><img src="img/setup1.png" alt="img" /></p><h2>Setting up a testing environment</h2><p>This is just some random stuff how I tested it out with qemu, might help.</p><h2>Setting up full disk encryption</h2><p>For how it is now, I will just draw an image:</p><pre><code>+------------------------+     +------------------------+
| /dev/sda1 111GB (root) |----&gt;| /dev/mapper/p0 (crypt) |-------------+
+------------------------+     +------------------------+             v
| /dev/sda2   8GB (swap) |                                   +-----------------+
+------------------------+                                   | / - btrfs raid0 |
                                                             +-----------------+
+------------------------+     +------------------------+             ^
| /dev/sdb  119GB (root) |----&gt;| /dev/mapper/p1 (crypt) |-------------+ 
+------------------------+     +------------------------+              
</code></pre><ul><li><a href="https://wiki.archlinux.org/index.php/GRUB/Tips_and_tricks">https://wiki.archlinux.org/index.php/GRUB/Tips_and_tricks</a></li><li><a href="https://www.gnu.org/software/grub/manual/grub.html#Security">https://www.gnu.org/software/grub/manual/grub.html#Security</a></li><li><a href="https://www.reddit.com/r/coreboot/comments/4uahg5/coreboot_on_x220_examples_of_grubcfg_with_support">https://www.reddit.com/r/coreboot/comments/4uahg5/coreboot_on_x220_examples_of_grubcfg_with_support</a></li><li><a href="https://notabug.org/vimuser/libreboot/src/master/resources/grub/config">https://notabug.org/vimuser/libreboot/src/master/resources/grub/config</a></li><li><a href="https://www.coreboot.org/GRUB2#Security">https://www.coreboot.org/GRUB2#Security</a></li></ul>]]></content></entry><entry><title>Flashing and Rooting RedMi Note 3</title><link href="http://pickfire.tk/posts/linux/phone"/><updated>2017-02-21T17:06:51Z</updated><content type="html"><![CDATA[<h1>Flashing and Rooting RedMi Note 3</h1><p>I have wanted to root the RedMi Note 3 （红米3）. Looking into the tutorials
online, rooting with Linux for RedMi Note 3 does not seem to be an easy task.</p><p>Some useful guides helps, <a href="//www.androidsage.com/2016/04/09/root-install-twrp-redmi-note-3">unofficial rooting</a> and <a href="//www.miui.com/shuaji-393.html">miui thread</a>.
Hope this guide helps in flash + root RedMi Note 3 officially with Linux. ^^</p><p>How I root? Unlock the bootloader officially, flash with china developer rom
and then root it. Does it really worth it? The official su sucks so nope. :(</p><p><strong>Important</strong>: Read this first, please note that Microsoft Windows is needed
for unlocking the bootloader for MiFlashUnlock, tried wine but does not work.</p><h2>Unlocking Bootloader</h2><p>Rooting does not work on global rom so I use develper rom. Specifically, the
China developer rom which does comes with china apps instead of google apps.</p><ol><li>Request to unlock from <a href="//miui.com/unlock">boot loader</a>.</li><li>Wait for few days (mine took 4 days).</li><li>Download and install the MiFlash on Windows.</li><li>Plug-in the phone and unlock it.</li></ol><p>For mine, <code>红米Note3 全网通 最新 开发版</code>.</p><ul><li>全网通 allows 电信、移动、联通 at the same time</li><li>开发版 is the developer rom</li></ul><h2>Flashing Bootloader</h2><p>After bootloader has been unlocked, use a Linux computer to flash bootloader.</p><ol><li>Get <a href="//wiki.archlinux.org/index.php/Android#Figure_out_device_IDs">device ID</a> (<code>lsusb</code>) and add to udev rules</li><li>Goto fastboot: <code>adb reboot bootloader</code> or hold volume down + power on boot</li><li>Get <code>fastboot getvar product</code>, download rom on <a href="//www.miui.com/shuaji-393.html">miui</a> (check name)</li><li>Boot to fastboot after enabled <code>Enable OEM Unlock</code> in developer options</li><li>After download, uncompress the rom file and run <code>sudo sh flash_all.sh</code></li><li><strong>Note</strong>: Data is gone after flashing</li></ol><h2>Setting up Device</h2><p>After flashing, there's a few things you would like to do:</p><ul><li>root the device - 安全中心 » 权限管理 » 开启ROOT权限</li><li>install google play, apk install fails, use <a href="//www.gugeanzhuangqi.com">谷歌安装器</a></li></ul>]]></content></entry><entry><title>Parallel computing to save time</title><link href="http://pickfire.tk/posts/linux/parallel"/><updated>2017-02-21T17:06:51Z</updated><content type="html"><![CDATA[<!doctype html><html lang="en"><title>Parallel computing to save time</title><meta charset="utf-8"><meta name="description" content="Pickfire's happy website by itself"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="stylesheet" href="/pub/style.css"><link href=/posts/linux/atom.xml type=application/atom+xml rel=alternate title="Pickfire linux ATOM Feed"><header><a id="fire" href="/">Site </a><span><strong>Posts</strong><span id=info> - <em>Embrace the Unknown</em></span></span></header><menu><span class="left"><a href=/about/>About</a><a href=/links/>Links</a><a href=/posts/ id='here'>Posts</a></span><span class="right"><a id="tor" href="http://pickfireywcq2wf2.onion/">Tor</a></span></menu><nav><ul><li><a href="/posts/craft/">Craft/</a></li><li><a href="/posts/learn/">Learn/</a></li><li><a href="/posts/linux/" class=site>Linux/</a><ul><li><a href="/posts/linux/backup.html">Backup</a></li><li><a href="/posts/linux/block.html">Block</a></li><li><a href="/posts/linux/dev.html">Dev</a></li><li><a href="/posts/linux/fast.html">Fast</a></li><li><a href="/posts/linux/multi-pointer.html">Multi-pointer</a></li><li><a href="/posts/linux/parallel.html" class=site>Parallel</a></li><li><a href="/posts/linux/phone.html">Phone</a></li><li><a href="/posts/linux/setup.html">Setup</a></li></ul></li></ul></nav><main><h1>Parallel computing to save time</h1><h2>Slurm</h2><h2>LDAP</h2><h2>Puppet</h2><h2>Distcc</h2><h2>GNU Parallel</h2></main><footer><span class="right"><a rel="license" href="http://creativecommons.org/licenses/by/4.0/">CC-BY</a>&ensp;<a href="/about/contact.html">Ivan Tham</a><link rel="stylesheet" href="/tor.css">]]></content></entry><entry><title>Multi-pointer in DWM</title><link href="http://pickfire.tk/posts/linux/multi-pointer"/><updated>2017-02-21T17:06:51Z</updated><content type="html"><![CDATA[<h1>Multi-pointer in DWM</h1><p>Multi-pointer can be an alternative to multi-seat. Compared to multi-seat,
multi-pointer is easier to setup (because no multi-seat experience), allows
hardware acceleration and at least one monitor is required. Bad news? Both
shared the same xorg server, most things are shared.</p><p>As of now, no window manager with active development support multi-pointers
with multiple active window. Dwm does not support multi-pointer but here's a
crappy version in which the other users can only control one application
through keyboard since there is only one active window at a time.</p><h2>Configuring inputs</h2><p>One way to configure input devices is via the <code>xinput</code> tool. Without any
arguments given, it should list all the input devices in short format.</p><pre><code>xinput
</code></pre><p>It will print all the master device (cursors on screen) and the slave device
(physical device). Master device comes in pair, which is pointer and keyboard.</p><h2>Adding master device</h2><p>To create another pointer for a new user. First, we add a master device.</p><pre><code>xinput create-master Name
</code></pre><p>Another pointer should appear in the center of the screen by now.</p><h2>Assigning slave device</h2><p>We will then require to assign a slave device to the master device. The <em>id</em> of
the <strong>master</strong> and <strong>slave</strong> device can be found by using <code>xinput</code>.</p><pre><code>xinput reattach &lt;slave&gt; &lt;master&gt;
</code></pre><p>By the end of this, both pointer can move simultaneously but keyboard cannot
type in different application simultaneously, this is normal for window manager
without multi-pointer support.</p><h2>Point master device to window</h2><p>Time to point the master device to the respective window, do this for both
pointer and keyboard master device (not sure if specifying one works).</p><p>The <strong>window</strong> is the PID of window which can be checked with either <code>xprop</code>
(useless sometimes) or <code>xdotool selectwindow</code>.</p><pre><code>xinput set-cp &lt;window&gt; &lt;master&gt;
</code></pre><p>If the setup is successful, the other keyboard should be able to input only in
the window. In which multiple user can play different games at the same time.</p><h2>Cleaning up</h2><p>Remove all the master device that was created.</p><pre><code>xinput remove-master &lt;master&gt;
</code></pre><p>And <code>reattach</code> the pointer or keyboard back to the main master device.</p><h2>Ideas</h2><ul><li>The other could have used Xephyr or Xnest to have his own session instead.</li></ul><h2>See also</h2><ul><li><a href="https://ao2.it/en/blog/2010/01/19/poor-mans-multi-touch-using-multiple-mice-xorg">https://ao2.it/en/blog/2010/01/19/poor-mans-multi-touch-using-multiple-mice-xorg</a></li><li><a href="https://www.x.org/wiki/Development/Documentation/MPX/">https://www.x.org/wiki/Development/Documentation/MPX/</a></li></ul>]]></content></entry><entry><title>Performance is the King!</title><link href="http://pickfire.tk/posts/linux/fast"/><updated>2017-02-21T17:06:51Z</updated><content type="html"><![CDATA[<h1>Performance is the King!</h1><h2>Speed up the slow systemd</h2><ul><li>Do <strong>simple benchmark</strong>
systemd-analyze [time|blame|critical-chain]</li><li>Enable <code>.socket</code> and disable <code>.service</code> (eg. sshd)</li><li>Set <code>Storage=volatile</code> in /etc/systemd/journald.conf</li></ul><h4><strong>Kernel</strong>: https://wiki.archlinux.org/index.php/Minimal_initramfs</h4><ul><li><p>For a better boost in boot time, remove the initramfs if no luks/lvm/raid is
used and compile linux kernel to include the modules needed in boot</p></li><li><p>Or instead, minimal initramfs (mkinitcpio here)</p><p>MODULES=&quot;ahci sd_mod btrfs&quot;
HOOKS=&quot;base&quot;</p></li></ul><h2>Speeding up DNS</h2><ul><li><p>One-liner to find fastest DNS server and add to <code>resolv.conf</code> (<a href="http://www.commandlinefu.com/commands/view/18802/a-function-to-find-the-fastest-dns-server">commandlinefu</a>):</p><p>curl -s http://public-dns.info/nameservers.txt | xargs -i timeout 1 ping -c1 -w 1 {} | sed -n &quot;/:.<em>time/ s/.<em>from ([^:]</em>).<em>time=([^ ]</em>).</em>/\2\t\1/p&quot; | sort -n | head -n1</p></li></ul>]]></content></entry><entry><title>Hosts-Blocking as an Ad-Block Alternative</title><link href="http://pickfire.tk/posts/linux/block"/><updated>2017-02-21T17:06:51Z</updated><content type="html"><![CDATA[<h1>Hosts-Blocking as an Ad-Block Alternative</h1><p>This is abandoned now.</p><p>https://github.com/StevenBlack/hosts
https://github.com/gaenserich/hostsblock</p><p>Those two projects have nice idea and have pros and cons, now I really hope to
help gaenserich to maintain it or probably I might just create mine in the
future.</p>]]></content></entry><entry><title>Prepare Yourself like there is No Tomorrow</title><link href="http://pickfire.tk/posts/linux/backup"/><updated>2017-02-21T17:06:51Z</updated><content type="html"><![CDATA[<!doctype html><html lang="en"><title>Prepare Yourself like there is No Tomorrow</title><meta charset="utf-8"><meta name="description" content="Pickfire's happy website by itself"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="stylesheet" href="/pub/style.css"><link href=/posts/linux/atom.xml type=application/atom+xml rel=alternate title="Pickfire linux ATOM Feed"><header><a id="fire" href="/">Site </a><span><strong>Posts</strong><span id=info> - <em>Embrace the Unknown</em></span></span></header><menu><span class="left"><a href=/about/>About</a><a href=/links/>Links</a><a href=/posts/ id='here'>Posts</a></span><span class="right"><a id="tor" href="http://pickfireywcq2wf2.onion/">Tor</a></span></menu><nav><ul><li><a href="/posts/craft/">Craft/</a></li><li><a href="/posts/learn/">Learn/</a></li><li><a href="/posts/linux/" class=site>Linux/</a><ul><li><a href="/posts/linux/backup.html" class=site>Backup</a></li><li><a href="/posts/linux/block.html">Block</a></li><li><a href="/posts/linux/dev.html">Dev</a></li><li><a href="/posts/linux/fast.html">Fast</a></li><li><a href="/posts/linux/multi-pointer.html">Multi-pointer</a></li><li><a href="/posts/linux/parallel.html">Parallel</a></li><li><a href="/posts/linux/phone.html">Phone</a></li><li><a href="/posts/linux/setup.html">Setup</a></li></ul></li></ul></nav><main><h1>Prepare Yourself like there is No Tomorrow</h1><p>I just hope that my computer never dies, but no one can guarantee that.</p><h2>Homemade Benchmark (Compression)</h2><p>I did a benchmark for different compression algorithms implementations such as pixz, xz, gzip, brotli, bzip2.</p><p>tar</p><h2>Just in case!</h2><p>No one is perfect! And so am I, sometimes I still accidentally deleted some files. Here are some file recovery tips:</p><h3>If file still opened in an application</h3><p>I will demonstrate this by deleting the pdf file <strong>while</strong> I am still viewing it in zathura pdf viewer.</p><ol><li>Check the PID of the application with <code>pgrep zathura</code> (or <code>ps aux | grep zathura</code>), output: <code>10678</code></li><li>Lists the opened files <code>file /proc/10678/fd/*</code> (or <code>ls -l</code>) and find the pdf file labeled <code>(deleted)</code></li><li>Copy that by <code>cat /proc/10678/fd/13 &gt; lv.pdf</code> and you should be able to view your file now.</li></ol><h3>If file/directory not overwritten yet on ext3/ext4 file system</h3><p>If possible, unmount the partition or else get a live rescue disk with <code>extundelete</code>. After the partition is unmounted, use <code>extundelete --undelete-files</code>.</p><p><strong>Warning:</strong> Make sure that the file really isn't overwritten (no mkdir dir/no touch file)</p></main><footer><span class="right"><a rel="license" href="http://creativecommons.org/licenses/by/4.0/">CC-BY</a>&ensp;<a href="/about/contact.html">Ivan Tham</a><link rel="stylesheet" href="/tor.css">]]></content></entry></feed>
